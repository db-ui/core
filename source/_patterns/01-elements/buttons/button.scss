@charset "utf-8";

@use "sass:string";
@use "button.variables";
@use "@db-ui/base/build/scss/variables";
@use "../../../css/helpers/functions";
@use "../../00-base/icons/icons.helpers";

.elm-button {
	align-items: center; // Centering the content vertically and horizontally
	border: 1px solid transparent;
	border-radius: 4px;
	display: inline-flex; // Centering the content vertically and horizontally
	font-size: functions.to-rem($pxValue: 16);
	justify-content: center; // Centering the content vertically and horizontally
	min-height: button.$button---minHeight;
	padding: functions.to-rem($pxValue: 8) functions.to-rem($pxValue: 16);

	&[data-icon],
	&[data-icon-before] {
		padding-left: functions.to-rem($pxValue: 14);
	}

	&[data-icon-after] {
		padding-right: functions.to-rem($pxValue: 14);
	}
	// Square icon only buttons
	&.is-icon-text-replace {
		width: button.$button---minHeight;
	}

	/*&:focus {
		border-color: #fff;
	}*/
	/*	&:active {
		filter: brightness(75%);
	}*/

	&%variant-brand-primary,
	&%variant-primary {
		color: button.$button---color;
	}

	&%variant-brand-primary,
	&%variant-primary {
		font-weight: 700;
	}

	&%variant-brand-primary {
		background-color: button.$button-brand-primary--backgroundColor;

		&:disabled {
			background-color: string.unquote(
				button.$button-brand-primary--backgroundColor + "40"
			);
		}

		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: button.$button-brand-primary-hover-backgroundColor;
			}

			&:active {
				background-color: #cc0013; // TODO: replace by correct color variable
			}
		}
	}

	&%variant-primary {
		background-color: button.$button-primary--backgroundColor;

		&:disabled {
			background-color: string.unquote(
				button.$button-primary--backgroundColor + "40"
			);
		}

		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: button.$button-primary-hover-backgroundColor;
			}

			&:active {
				background-color: #363c4a;
			}
		}
	}

	&%variant-secondaryOutline {
		// TODO: This might get replaced by another effect
		backdrop-filter: blur(4px);
		background-color: transparent;
		border-color: variables.$db-color-cool-gray-700;
		color: variables.$db-color-cool-gray-700;

		&:disabled {
			color: string.unquote(variables.$db-color-cool-gray-700 + "80");
			border-color: string.unquote(
				variables.$db-color-cool-gray-700 + "40"
			);
		}

		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: button.$button-secondaryOutline-hover-backgroundColor;
			}

			&:active {
				background-color: button.$button-secondaryOutline-active-backgroundColor;
			}
		}
	}

	&%variant-secondarySolid {
		background-color: button.$button-secondarySolid--backgroundColor;
		color: variables.$db-color-cool-gray-700;

		&:disabled {
			color: string.unquote(variables.$db-color-cool-gray-700 + "80");
			background-color: string.unquote(
				button.$button-secondarySolid--backgroundColor + "40"
			);
		}

		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: button.$button-secondarySolid-hover-backgroundColor;
			}

			&:active {
				background-color: button.$button-secondarySolid-active-backgroundColor;
			}
		}
	}

	&%variant-tertiaryPlain {
		background-color: transparent; // shame.css
		border: 2px solid transparent;
		color: variables.$db-color-cool-gray-700;

		&:disabled {
			color: string.unquote(variables.$db-color-cool-gray-700 + "80");
		}

		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: button.$button-secondaryOutline-hover-backgroundColor;
			}

			&:active {
				background-color: button.$button-secondaryOutline-active-backgroundColor;
			}
		}
	}

	// Sizes
	&%size-Small {
		min-height: functions.to-rem($pxValue: 36);

		&:not(.is-icon-text-replace) {
			font-size: functions.to-rem($pxValue: 14);
		}

		&[data-icon],
		&[data-icon-before] {
			@include icons.iconMeta(20);
		}

		&[data-icon-after] {
			@include icons.iconMeta($size: 20, $position: "after");
		}
		// Square icon only buttons
		&.is-icon-text-replace {
			width: functions.to-rem($pxValue: 36);
		}
	}

	&%size-Large {
		min-height: functions.to-rem($pxValue: 52);

		&:not(.is-icon-text-replace) {
			font-size: functions.to-rem($pxValue: 20);
		}
		// Square icon only buttons
		&.is-icon-text-replace {
			width: functions.to-rem($pxValue: 52);
		}
	}

	&[data-size="small"] {
		@extend %size-Small;
	}

	&[data-size="large"] {
		@extend %size-Large;
	}

	// Providing the variants as HTML attributes as well
	&[data-variant="brand-primary"] {
		@extend %variant-brand-primary;
	}

	&[data-variant="primary"] {
		@extend %variant-primary;
	}

	&[data-variant="secondary-outline"] {
		@extend %variant-secondaryOutline;
	}

	&[data-variant="secondary-solid"] {
		@extend %variant-secondarySolid;
	}

	&[data-variant="tertiary-plain"] {
		@extend %variant-tertiaryPlain;
	}

	&:disabled {
		color: string.unquote(button.$button---color + "80");
	}

	// width
	&%width-Full {
		inline-size: 100%;
	}

	&[data-width="full"] {
		@extend %width-Full;
	}
}
