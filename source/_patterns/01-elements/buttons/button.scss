@charset "utf-8";

@import "button.variables";

.elm-button {
	border: 1px solid transparent;
	border-radius: 4px;
	padding: to-rem($pxValue: 7) to-rem($pxValue: 16);

	font-weight: 700;

	text-align: center;

	&[data-icon],
	&[data-icon-before] {
		padding-left: to-rem($pxValue: 14);
	}
	&[data-icon-after] {
		padding-right: to-rem($pxValue: 14);
	}
	font-size: to-rem($pxValue: 16);
	min-height: $button---minHeight;
	// Square icon only buttons
	&.is-icon-text-replace {
		width: $button---minHeight;
	}

	// Changing background-color on hover should be animated by a transition
	transition: background-color 0.3s cubic-bezier(0.15, 0, 0.45, 1);

	// Centering the content vertically and horizontally
	align-items: center;
	display: inline-flex;
	justify-content: center;

	/*&:focus {
		border-color: #fff;
	}*/
	/*	&:active {
		filter: brightness(75%);
	}*/

	&%variant-primary,
	&%variant-secondary-inverted {
		color: $button---color;
	}

	&%variant-primary {
		background-color: $button-primary--backgroundColor;

		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: $button-primary-hover-backgroundColor;
			}
		}
		&:active {
			background-color: $button-primary-active-backgroundColor; // TODO: replace by correct color variable
		}
	}

	&%variant-secondary-inverted {
		background-color: $button-secondaryInverted--backgroundColor;
		border-color: #fff;

		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: $button-secondaryInverted-hover-backgroundColor;
			}
		}
		&:active {
			background-color: $button-secondaryInverted-active-backgroundColor;
		}
	}

	&%variant-secondary {
		background-color: $button-secondary--backgroundColor;
		border-color: $db-color-cool-gray-700;
		color: $db-color-cool-gray-700;

		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: $button-secondary-hover-backgroundColor;
			}
		}
		&:active {
			background-color: $button-secondary-active-backgroundColor;
		}
	}

	&%variant-tertiary {
		// TODO: replace by the correct variable afterwards
		color: #0e1013;
		background-color: $button-tertiary--backgroundColor;
		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: $button-tertiary-hover-backgroundColor;
			}
		}
		&:active {
			background-color: $button-tertiary-active-backgroundColor;
		}
	}

	&%variant-ghost {
		color: $db-color-cool-gray-700;
		border: 2px solid transparent;
		background-color: transparent; // shame.css
		&:not(:disabled) {
			&:hover {
				// TODO: This could probably get simplified later on e.g. via CSS variables
				background-color: $button-ghost-hover-backgroundColor;
			}
		}
		&:active {
			background-color: $button-ghost-active-backgroundColor;
		}
	}

	// Sizes
	&%size-XXSmall {
		$height: 20;
		$icon-size: 16;

		min-height: to-rem($pxValue: $height);
		padding: to-rem($pxValue: 1) to-rem($pxValue: 4);

		&:not(.is-icon-text-replace) {
			font-size: to-rem($pxValue: 12);
		}
		&[data-icon],
		&[data-icon-before] {
			@include iconMeta($icon-size);
		}
		&[data-icon-after] {
			@include iconMeta($size: $icon-size, $position: "after");
		}
		// Square icon only buttons
		&.is-icon-text-replace {
			width: to-rem($pxValue: $height);
		}
	}
	&%size-XSmall {
		$height: 24;
		$icon-size: 16;

		min-height: to-rem($pxValue: $height);
		padding: to-rem($pxValue: 3) to-rem($pxValue: 8);

		&:not(.is-icon-text-replace) {
			font-size: to-rem($pxValue: 12);
		}
		&[data-icon],
		&[data-icon-before] {
			@include iconMeta($icon-size);
		}
		&[data-icon-after] {
			@include iconMeta($size: $icon-size, $position: "after");
		}
		// Square icon only buttons
		&.is-icon-text-replace {
			width: to-rem($pxValue: $height);
		}
	}
	&%size-Small {
		$height: 32;
		$icon-size: 16;

		min-height: to-rem($pxValue: $height);
		padding: to-rem($pxValue: 6) to-rem($pxValue: 12);

		&:not(.is-icon-text-replace) {
			font-size: to-rem($pxValue: 14);
		}
		&[data-icon],
		&[data-icon-before] {
			@include iconMeta($icon-size);
		}
		&[data-icon-after] {
			@include iconMeta($size: $icon-size, $position: "after");
		}
		// Square icon only buttons
		&.is-icon-text-replace {
			width: to-rem($pxValue: $height);
		}
	}
	&%size-Large {
		$height: 48;

		min-height: to-rem($pxValue: $height);
		padding: to-rem($pxValue: 12) to-rem($pxValue: 24);
		// Square icon only buttons
		&.is-icon-text-replace {
			width: to-rem($pxValue: $height);
		}
	}
	&%size-XLarge {
		$height: 64;

		min-height: to-rem($pxValue: $height);
		padding: to-rem($pxValue: 20) to-rem($pxValue: 24);
		// Square icon only buttons
		&.is-icon-text-replace {
			width: to-rem($pxValue: $height);
		}
	}

	&[data-size="xsmall"] {
		@extend %size-XSmall;
	}
	&[data-size="xxsmall"] {
		@extend %size-XXSmall;
	}
	&[data-size="small"] {
		@extend %size-Small;
	}
	&[data-size="large"] {
		@extend %size-Large;
	}
	&[data-size="xlarge"] {
		@extend %size-XLarge;
	}

	// Width
	&%width-Full {
		width: 100%;
	}

	&[data-width="full"] {
		@extend %width-Full;
	}

	// Providing the variants as HTML attributes as well
	&[data-variant="primary"] {
		@extend %variant-primary;
	}
	&[data-variant="secondary-inverted"] {
		@extend %variant-secondary-inverted;
	}
	&[data-variant="secondary"] {
		@extend %variant-secondary;
	}
	&[data-variant="tertiary"] {
		@extend %variant-tertiary;
	}
	&[data-variant="ghost"] {
		@extend %variant-ghost;
	}

	&:disabled {
		opacity: 0.25;
	}
}
